<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2024/12/01/hello-world/"/>
      <url>/2024/12/01/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page &quot;categories&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性及使用(二)</title>
      <link href="/2018/11/14/test/"/>
      <url>/2018/11/14/test/</url>
      
        <content type="html"><![CDATA[<h2 id="扩展注解的支持"><a href="#扩展注解的支持" class="headerlink" title="扩展注解的支持"></a>扩展注解的支持</h2><p>Java 8扩展了注解的上下文。<strong>现在几乎可以为任何东西添加注解：局部变量、泛型类、父类与接口的实现，就连方法的异常也能添加注解</strong>。下面演示几个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import java.util.ArrayList;import java.util.Collection;public class Annotations &#123;    @Retention(RetentionPolicy.RUNTIME)    @Target(&#123; ElementType.TYPE_USE, ElementType.TYPE_PARAMETER &#125;)    public @interface NonEmpty &#123;    &#125;    public static class Holder&lt;@NonEmpty T&gt; extends @NonEmpty Object &#123;        public void method() throws @NonEmpty Exception &#123;        &#125;    &#125;    @SuppressWarnings(&quot;unused&quot;)    public static void main(String[] args) &#123;        final Holder&lt;String&gt; holder &#x3D; new @NonEmpty Holder&lt;String&gt;();        @NonEmpty Collection&lt;@NonEmpty String&gt; strings &#x3D; new ArrayList&lt;&gt;();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>在Java 8中，Base64编码已经成为Java类库的标准。它的使用十分简单，下面让我们看一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import java.nio.charset.StandardCharsets;import java.util.Base64;public class Base64s &#123;    public static void main(String[] args) &#123;        final String text &#x3D; &quot;Base64 finally in Java 8!&quot;;        final String encoded &#x3D; Base64.getEncoder().encodeToString(text.getBytes(StandardCharsets.UTF_8));        System.out.println(encoded);        final String decoded &#x3D; new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);        System.out.println(decoded);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序在控制台上输出了编码后的字符与解码后的字符：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">QmFzZTY0IGZpbmFsbHkgaW4gSmF2YSA4IQ&#x3D;&#x3D;Base64 finally in Java 8!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Base64类同时还提供了对URL、MIME友好的编码器与解码器（<code>Base64.getUrlEncoder() / Base64.getUrlDecoder()</code>, <code>Base64.getMimeEncoder() / Base64.getMimeDecoder()</code>）。</p><h2 id="JavaFX"><a href="#JavaFX" class="headerlink" title="JavaFX"></a>JavaFX</h2><p><code>JavaFX</code>是一个强大的图形和多媒体处理工具包集合，它允许开发者来设计、创建、测试、调试和部署富客户端程序，并且和Java一样跨平台。从Java8开始，JavaFx已经内置到了JDK中。关于JavaFx更详细的文档可参考<a href="http://www.javafxchina.net/blog/docs/">JavaFX中文文档</a>。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="1-JDBC4-2规范"><a href="#1-JDBC4-2规范" class="headerlink" title="1. JDBC4.2规范"></a>1. JDBC4.2规范</h3><p>JDBC4.2主要有以下几点改动：</p><ul><li>增加了对<code>REF Cursor</code>的支持</li><li>修改返回值大小范围（update count）</li><li>增加了<code>java.sql.DriverAction</code>接口</li><li>增加了<code>java.sql.SQLType</code>接口</li><li>增加了<code>java.sql.JDBCtype</code>枚举</li><li>对<code>java.time</code>包时间类型的支持</li></ul><h3 id="2-更好的类型推测机制"><a href="#2-更好的类型推测机制" class="headerlink" title="2. 更好的类型推测机制"></a>2. 更好的类型推测机制</h3><p>Java 8在类型推测方面有了很大的提高。在很多情况下，编译器可以推测出确定的参数类型，这样就能使代码更整洁。让我们看一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Value&lt;T&gt; &#123;    public static&lt;T&gt; T defaultValue() &#123;        return null;    &#125;    public T getOrDefault(T value, T defaultValue) &#123;        return (value !&#x3D; null) ? value : defaultValue;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是<code>Value&lt;String&gt;</code>类型的用法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TypeInference &#123;    public static void main(String[] args) &#123;        final Value&lt;String&gt; value &#x3D; new Value&lt;&gt;();        value.getOrDefault(&quot;22&quot;, Value.defaultValue());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Value.defaultValue()</code>的参数类型可以被推测出，所以就不必明确给出。在Java 7中，相同的例子将不会通过编译，正确的书写方式是<code>Value.&lt;String&gt;defaultValue()</code>。</p><h3 id="3-HashMap性能提升"><a href="#3-HashMap性能提升" class="headerlink" title="3. HashMap性能提升"></a>3. HashMap性能提升</h3><p>Java8中，HashMap内部实现又引入了红黑树，使得HashMap的总体性能相较于Java7有比较明显的提升。以下是对Hash均匀和不均匀的情况下的性能对比</p><h4 id="1-Hash较均匀的情况"><a href="#1-Hash较均匀的情况" class="headerlink" title="(1). Hash较均匀的情况"></a>(1). Hash较均匀的情况</h4><p><img src="https://images2017.cnblogs.com/blog/647994/201801/647994-20180105204924753-361068557.png" alt="Hash较均匀时的性能对比"></p><h4 id="2-Hash极不均匀的情况"><a href="#2-Hash极不均匀的情况" class="headerlink" title="(2). Hash极不均匀的情况"></a>(2). Hash极不均匀的情况</h4><p><img src="https://images2017.cnblogs.com/blog/647994/201801/647994-20180105205031643-1765887276.png" alt="Hash极不均匀时的性能对比"></p><h3 id="4-IO-NIO-的改进"><a href="#4-IO-NIO-的改进" class="headerlink" title="4. IO&#x2F;NIO 的改进"></a>4. IO&#x2F;NIO 的改进</h3><p>Java8 对<code>IO/NIO</code>也做了一些改进。主要包括：改进了<code>java.nio.charset.Charset</code>的实现，使编码和解码的效率得以提升，也精简了<code>jre/lib/charsets.jar</code>包；优化了<code>String(byte[], *)</code>构造方法和<code>String.getBytes()</code>方法的性能；还增加了一些新的<code>IO/NIO</code>方法，使用这些方法可以从文件或者输入流中获取流（<code>java.util.stream.Stream</code>），通过对流的操作，可以简化文本行处理、目录遍历和文件查找。</p><p>新增的 API 如下：</p><ul><li><code>BufferedReader.line()</code>: 返回文本行的流<code>Stream&lt;String&gt;</code></li><li><code>File.lines(Path, Charset)</code>: 返回文本行的流<code>Stream&lt;String&gt;</code></li><li><code>File.list(Path)</code>: 遍历当前目录下的文件和目录</li><li><code>File.walk(Path, int, FileVisitOption)</code>: 遍历某一个目录下的所有文件和指定深度的子目录</li><li><code>File.find(Path, int, BiPredicate, FileVisitOption...)</code>: 查找相应的文件</li></ul><p>下面就是用流式操作列出当前目录下的所有文件和目录：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Files.list(new File(&quot;.&quot;).toPath()).forEach(System.out::println);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-JavaScript引擎Nashorn"><a href="#5-JavaScript引擎Nashorn" class="headerlink" title="5. JavaScript引擎Nashorn"></a>5. JavaScript引擎Nashorn</h3><p>Java 8提供了一个新的<code>Nashorn javascript</code>引擎，它允许我们在JVM上运行特定的javascript应用。Nashorn javascript引擎只是<code>javax.script.ScriptEngine</code>另一个实现，而且规则也一样，允许Java和JavaScript互相操作。这里有个小例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ScriptEngineManager manager &#x3D; new ScriptEngineManager();ScriptEngine engine &#x3D; manager.getEngineByName(&quot;JavaScript&quot;);System.out.println(engine.getClass().getName());System.out.println(&quot;Result:&quot; + engine.eval(&quot;function f()&#123;return 1;&#125;; f() + 1;&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jdk.nashorn.api.scripting.NashornScriptEngineResult: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-并发（Concurrency）"><a href="#6-并发（Concurrency）" class="headerlink" title="6. 并发（Concurrency）"></a>6. 并发（Concurrency）</h3><p>在新增<code>Stream</code>机制与<code>Lambda</code>的基础之上，在<code>java.util.concurrent.ConcurrentHashMap</code>中加入了一些新方法来支持聚集操作。同时也在<code>java.util.concurrent.ForkJoinPool</code>类中加入了一些新方法来支持共有资源池（common pool）（请查看我们关于Java 并发的免费课程）。</p><p>新增的<code>java.util.concurrent.locks.StampedLock</code>类提供一直基于容量的锁，这种锁有三个模型来控制读写操作（它被认为是不太有名的<code>java.util.concurrent.locks.ReadWriteLock</code>类的替代者）。</p><p>在<code>java.util.concurrent.atomic</code>包中还增加了下面这些类：</p><ul><li>DoubleAccumulator</li><li>DoubleAdder</li><li>LongAccumulator</li><li>LongAdder</li></ul><h3 id="7-类依赖分析器jdeps"><a href="#7-类依赖分析器jdeps" class="headerlink" title="7. 类依赖分析器jdeps"></a>7. 类依赖分析器jdeps</h3><p><code>Jdeps</code>是一个功能强大的命令行工具，它可以帮我们显示出包层级或者类层级java类文件的依赖关系。它接受class文件、目录、jar文件作为输入，默认情况下，<code>jdeps</code>会输出到控制台。</p><p>作为例子，让我们看看现在很流行的Spring框架的库的依赖关系报告。为了让报告短一些，我们只分析一个jar: <code>org.springframework.core-3.0.5.RELEASE.jar</code>.</p><p><code>jdeps org.springframework.core-3.0.5.RELEASE.jar</code>这个命令输出内容很多，我们只看其中的一部分，这些依赖关系根绝包来分组，如果依赖关系在classpath里找不到，就会显示not found.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:\Program Files\Java\jdk1.8.0\jre\lib\rt.jar   org.springframework.core (org.springframework.core-3.0.5.RELEASE.jar)      -&gt; java.io      -&gt; java.lang      -&gt; java.lang.annotation      -&gt; java.lang.ref      -&gt; java.lang.reflect      -&gt; java.util      -&gt; java.util.concurrent      -&gt; org.apache.commons.logging                         not found      -&gt; org.springframework.asm                            not found      -&gt; org.springframework.asm.commons                    not found   org.springframework.core.annotation (org.springframework.core-3.0.5.RELEASE.jar)      -&gt; java.lang      -&gt; java.lang.annotation      -&gt; java.lang.reflect      -&gt; java.util<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-JVM的PermGen空间被移除"><a href="#8-JVM的PermGen空间被移除" class="headerlink" title="8. JVM的PermGen空间被移除"></a>8. JVM的PermGen空间被移除</h3><p><code>PermGen</code>空间被移除了，取而代之的是<code>Metaspace（JEP 122）</code>。JVM选项<code>-XX:PermSize</code>与<code>-XX:MaxPermSize</code>分别被<code>-XX:MetaSpaceSize</code>与<code>-XX:MaxMetaspaceSize</code>所代替。</p><hr><p>参考文档：</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html">What’s New in JDK 8</a></li><li><a href="http://www.importnew.com/11908.html">Java 8新特性终极指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
